JavaScript is a programming language

Input(code) ------> Computer ------> Output


Console is used to run code in the browser



*********Variables************

Variables are container in datatypes are saved

Datatypes are of different types of data which can be stored in the variables. 

Primitive                             Non-Primitive

number (int, float)                         Objects -> Collection of values
boolean                         
Undefined
Null
BigInt
Symbol
string



Variables are case sensitive.
Only letters, digits, ' _ ' and ' $ ' are allowed to use in variable name.
Only a letter, ' _ ' and ' $ ' can be used as 1st character while giving a variable name.
Keywords cannot be used as variable name.
eg.console, break, switch, etc.

Generally, camelCase is used to give names to variables


Defining a variable

var: Variable can be re-declared and updated. A global scope variable.

let: Variable can-not be re-declared but can be updated. A block scope variable.

const: Variable can-not be re-declared or updated. A block scope variable.




*****************************Operators & Condinational Statements***********************
// This is how comments are written
//This is a comment

// console.log("Hello World")

// **************************************************

//This is used for single line comment

/* This is used for multiline 
        comments */


//Operators 
//Arthematic Operators
/*

+ , - , * , / , %



a + b
^ ^ ^
| | |
  | Operand
  Operator

  */

let a = 5;
let b =2;

// console.log("a+b = ", a+b)
// console.log("a-b = ", a-b)
// console.log("a*b = ", a*b)
// console.log("a/b = ", a/b)
// console.log("a%b = ", a%b)
// console.log("a**b = ", a**b)


//Uniary Operator



console.log("a = "+ a++)

console.log("a = "+ a--)


console.log("a = "+ ++a)

console.log("a = "+ --a)


//Assignment Operators

/* =, +=, -=, *=, /=, **=

a+=4; //a = a + 4;
a-=4; //a = a - 4;
a*=4; //a = a * 4;
a/=4; //a = a / 4;
*/

//Comparision Operator

/*
Equal to -> ==
Equal & type -> ===
Not equal to -> !=
Not equal to & type -> !===

Greater than ->    >
Greater than equal to ->  >= 
Less than ->   <
Less than equal to ->   <=


Comparision Operator returns boolean values
*/

// console.log(a==b)   If string value contains only number then it compared to int it returns true 
// console.log(a===b)  For that strictly check is used  
// console.log(a!=b)
// console.log(a!==b)


//Logical Operators
// Logical Operator returns boolean values

/* Logical


Logical and -> && -----> Both conditions should be true

Logical OR -> ||  ------> One of them should be true
   
Logical NOT ->    ------>  When its true it returns false


*/



Condinational Statements

let color; 
if(mode === "dark-mode"){
    //some code
}
else{
    //some code
}




Ternary Operator

condtion ? true Output : false Output
let res = age > 18 ? "Adult" : Not Adult 



Switch Statements

already known


const expr = 'Papayas';
switch (expr) {
  case 'Oranges':
    console.log('Oranges are $0.59 a pound.');
    break;
  case 'Mangoes':
  case 'Papayas':
    console.log('Mangoes and papayas are $2.79 a pound.');
    // Expected output: "Mangoes and papayas are $2.79 a pound."
    break;
  default:
    console.log(`Sorry, we are out of ${expr}.`);
}






************************Chapter-3 Loops in JavaScript******************************
Used to excute a code again and again

1)For loop      for(value; condition; updation)


2)While loop    let i=1 <--initialization
                while(i<=5){ <----Condition
                  //some code
                  i++;  <--- Updation
                }


3)Do-While loop  let i=20; <----Initialization
                 do{
                  console.log("Apna College");
                  i++; <--Updation
                 }while(i<=10);  <----Condition





Infinite loop
We should never do infinite loop in programming. This consumes lot of memory and system can be crashed




for of loop

        variable   strings and arrays
         |         |
         v         v
for(let val of StrVar){
  console.log(val);
}





*******************Chapter-4 Strings********************

Strings is a sequence of characters used to represent text
Strings are immutable in nature.


let str = "Apna college";


string length
str.length



String indices
str[0], str[1], str[2]

//Strings

let str = "Apna College";   //Both are valid
let str1 = 'Apna college';  


//Properties

//1. string length
//syntax str.length


let len = str.length;

console.log(len);




//Template Literals in JavaScript
let sentence =`This is a template literal which is special string`
console.log(typeof(sentence))


//Used for simplify the output strings

let obj = {
    item: "pen",
    price: 10,
}

let output =`The cost of ${obj.item} is ${obj.price} rs.`;
console.log(output)

//Sreing interpolation
//   'string text ${expression} string text`

//Methods in JavaScript


//Accessing position of characters
console.log("pos of C in apna college is "+ str.indexOf("C"))

//knowing character at index
console.log("At index 5 character is "+ str.charAt(5))

//Convert to upper case
//It do not changes original value it returns new value in upper case
console.log( str.toUpperCase())



********************Arrays***********************]


Arrays is a collection of items i.e collection of different or same types datatype Variables.
Arrays are mutable in nature. Its value can be changed.

syntax =>


 let arr1 =[
"Tony" , "Captain", "Thor" , "Hulk"
 ];


 //array Properties

//prints the array
console.log(arr1);

//returns the length of arrays
console.log(arr1.length);

//returns type of array which is object
console.log(typeof(arr1));



//Array indices
console.log(arr1[0]);
console.log(arr1[1]);
console.log(arr1[2]);
console.log(arr1[3]);



//Looping over the array

for(let val of arr1){
    console.log(val)
}

let numPlate =[3223, 9779, 4296, 7485];

console.log("");
console.log("Advanced Forloop");

for(let val of numPlate){
    console.log(val)
}

console.log("");

console.log("Normal  for loop")
for(let i=0 ; i<numPlate.length; i++){
    console.log(numPlate[i]);
}


Array methods


//reverses the array
// arr1 =arr1.reverse();
console.log(arr1);

//Add to end
//arr1.push()

//Delete from end and returns
//arr1.pop()

//Converts array to string
//arr1.toString():


//concat 2 arrays
//Unshift => Adds to start
//shift => delete or removes from start
//slice = Slices the array and it doesnt change the orignal array
//splice = change the orignal array (add, remove, replace)





***********************Functions in JavScript****************

Functions:
Functions are block of code in which that block of code performs a specific task and it can be invoked(called) whenever it needed
//function can take parameters and can return value


//Arrow functions
//Arrow functions are introduced in Modern JavaScript to simplify the functions concept
//Anonymous function can be also written


*Function Definition

function functionName(){
  //some code
}
function functionName(param 1, param 2){
  //some code

}



*Function call
functionName();



function myFunction(msg){
                    ^^^======parameter
    console.log(msg)
                
}


myFunction("I love JS);
               ^^
               ========= Argument

// parameters are local variable scope and cannot be accessed outside this block


**forEach Loop in Arrays
//It is a method
//Used with the arrays and strings

**Functions can be passed as a parameter in JavaScript

arr.forEach(callbackFunction)


//callback function

function abc(){              |
  console.log("Hello");      |
}                            |
                             |=========> This is valid.
funtion myFunc (abc) {       |
    return abc;              |
}                            |



Higher order functions/methods

It uses a different function as a paramter or they return value as a function is called as Higher order functions




//Some more array methods

//Map Method

It returns a new array as a output in array methods
arr.map((val) = {
  //some code
})


//Filter method
// filter out array on a given condition
arr.filter((val) =>{
  //some code
})






******3 Musketeers of Web Development*******
1)HTML - Skeleton of a webpage
2)CSS  - Sytling of the website for asthetics and looks
3)JavaScript - Adds logic to the web page



Coding in Separate files 

1. Increases readability
2. Increases modularilty




Window Objects
it represents an open window in a browser.
It is created by browser automatically not by JavaScript.
It is a global objects with way more properties& methods




*********************DOM - Document Object Model****************
>>>DOM Manipulation

selecting with ID
document.getElementById("MyId"); //return value specific to the id which we have given

selecting with class
document.getElementsByClassName("myClass);

Selecting with tag
document.getElementsByTagName("p") // Tag means HTML tag.


**DOM Properties**
1.
.tagName : Returns the tag used for elements

2.
innerText : Returns the text content of the element and all its children
e.g parent, child, siblings nodes 

3.
innerHTML : Retunrs the text inside with the HTML Tags

4.
textcontent : Returns the inside text/content with the hidden element




>>>Accessing the attribute value

getAttribute(attr) //to get the attribute value

setAttribute(attr, value) // to set the attribute value


>>>for Changing style values

>>>>Insert elements
//for creating 
let el = document.createElement("button")

node.append(el) //adds at the end of the node






***********Events************
Interesting changes
it can be genrated by user access and environment

mouse events( click, double click, mouseover(hover))

keyboard events( ket press, keyup, keydown)

form events(submits)

event handling 
event handling is the process in which we can perform an action in a webpage or change its state when a user interacts with the interface
we can track changes
>>inline event handling 
>>using functions  -- More priority


event object
it knows already about the events
it saves all the event properties in memory


event listeners

node.eventListners(event, callback)
multiple eventListners can be added for one element

node.removeEventListner(event, callback)



***************Classes and Objects******************* 
Object is an entity having state and behaviour


prototypes in JS
object.__proto__ = employee;
if object and prototype has same methods, the object methods are used.

Classes in JS
classes is a blueprint in JavaScript. which helps to construct and object.

syntax: 

class MyClass {
  
  constructor(){

  }

  method1(){

  }

  method2(){

  }

}


let ObjName = new Myclass();
We can use classes to reduce coding. 
We can create infinite indivisual objects using Classes

>>>constructor
constructor is a special method in JS
it helps to build object

Inheritance in JS
Inheritance is passing down the parent properties to child 

class Parent {

}

class Child extends Parent {

}

if child and parent have same methods the child method gets more priority

>>>Super Keyword
In case of calling parent class constructor we have to super keyword.
to invoke parent class constructor we use the super keyword.

*super.methodName();


>>>Error handling in JS
When a error occurs in a code that code stops working immediately.
That's why error handling is introduced.
syntax: 

try {
  //some code which we are not sure it will give error or not
  catch(err);
}
catch{
  console.log(err)
}



*********Callback functions**********

Synchronous programming
Just one by one 

Asynchronous programming
Due to synchronous programming, A particular block of code gets very much time to run thats why it there delay in UI that's why asynchronous programming is used in JS
It allows next code execute without waiting for it

setTimeout(functionName, the time)


>>>callbacks
It is arguments to an another function


//callback hell
//it is callback nesting (pyramid structure in callbacks) thats why it is difficult to understand
To solve callback hells there are promises
We can use callback hells but not on deep level


//promises
It is an Object in JS
It is a eventual completion of task.
Resolve and rejects these 2 functions are provided by the JavaScript in promises
resolve and reject are 2 callback functions provided by JavaScript

3 states are there in Promise
1. Fullfilled (Completed)
2. Pending (Waiting)
3. Rejected (Cancelled)


//syntax 

let promise = new Promise((resolve, reject) => {....})
                          |               |
                          \---------------/
                                  v
                       Function with 2 handlers


Promises

.then() & .catch()

promise.then((res) => {....})

promise.catch((err) => {....})



//Promise chaining
nesting of promises is called as promise chaining


//This is the actual promise chaining
getData(1)
.then((res) => {
    return getData(2);
})
.then((res) =>{
    return getData(3);
})
.then((res) =>{
    console.log(res);
});


//aync await

//async functiopn 

async function myFunc(params) {
  console.log("Hello!"); 
}


//await keyword

// await pauses the execution of its async function until the promise is settled


//Async-await

// async function getAllData(params) {
//   await getData(1);
//   await getData(2);
//   await getData(3);
// }


//IIFE: Immediately Invoked Function Expression
// Immediately invoking function without calling it 
// One time use only
