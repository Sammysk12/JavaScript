JavaScript is a programming language

Input(code) ------> Computer ------> Output


Console is used to run code in the browser



*********Variables************

Variables are container in datatypes are saved

Datatypes are of different types of data which can be stored in the variables. 

Primitive                             Non-Primitive

number (int, float)                         Objects -> Collection of values
boolean                         
Undefined
Null
BigInt
Symbol
string



Variables are case sensitive.
Only letters, digits, ' _ ' and ' $ ' are allowed to use in variable name.
Only a letter, ' _ ' and ' $ ' can be used as 1st character while giving a variable name.
Keywords cannot be used as variable name.
eg.console, break, switch, etc.

Generally, camelCase is used to give names to variables


Defining a variable

var: Variable can be re-declared and updated. A global scope variable.

let: Variable can-not be re-declared but can be updated. A block scope variable.

const: Variable can-not be re-declared or updated. A block scope variable.




*****************************Operators & Condinational Statements***********************
// This is how comments are written
//This is a comment

// console.log("Hello World")

// **************************************************

//This is used for single line comment

/* This is used for multiline 
        comments */


//Operators 
//Arthematic Operators
/*

+ , - , * , / , %



a + b
^ ^ ^
| | |
  | Operand
  Operator

  */

let a = 5;
let b =2;

// console.log("a+b = ", a+b)
// console.log("a-b = ", a-b)
// console.log("a*b = ", a*b)
// console.log("a/b = ", a/b)
// console.log("a%b = ", a%b)
// console.log("a**b = ", a**b)


//Uniary Operator



console.log("a = "+ a++)

console.log("a = "+ a--)


console.log("a = "+ ++a)

console.log("a = "+ --a)


//Assignment Operators

/* =, +=, -=, *=, /=, **=

a+=4; //a = a + 4;
a-=4; //a = a - 4;
a*=4; //a = a * 4;
a/=4; //a = a / 4;
*/

//Comparision Operator

/*
Equal to -> ==
Equal & type -> ===
Not equal to -> !=
Not equal to & type -> !===

Greater than ->    >
Greater than equal to ->  >= 
Less than ->   <
Less than equal to ->   <=


Comparision Operator returns boolean values
*/

// console.log(a==b)   If string value contains only number then it compared to int it returns true 
// console.log(a===b)  For that strictly check is used  
// console.log(a!=b)
// console.log(a!==b)


//Logical Operators
// Logical Operator returns boolean values

/* Logical


Logical and -> && -----> Both conditions should be true

Logical OR -> ||  ------> One of them should be true
   
Logical NOT ->    ------>  When its true it returns false


*/



Condinational Statements

let color; 
if(mode === "dark-mode"){
    //some code
}
else{
    //some code
}




Ternary Operator

condtion ? true Output : false Output
let res = age > 18 ? "Adult" : Not Adult 



Switch Statements

already known


const expr = 'Papayas';
switch (expr) {
  case 'Oranges':
    console.log('Oranges are $0.59 a pound.');
    break;
  case 'Mangoes':
  case 'Papayas':
    console.log('Mangoes and papayas are $2.79 a pound.');
    // Expected output: "Mangoes and papayas are $2.79 a pound."
    break;
  default:
    console.log(`Sorry, we are out of ${expr}.`);
}






************************Chapter-3 Loops in JavaScript******************************
Used to excute a code again and again

1)For loop      for(value; condition; updation)


2)While loop    let i=1 <--initialization
                while(i<=5){ <----Condition
                  //some code
                  i++;  <--- Updation
                }


3)Do-While loop  let i=20; <----Initialization
                 do{
                  console.log("Apna College");
                  i++; <--Updation
                 }while(i<=10);  <----Condition





Infinite loop
We should never do infinite loop in programming. This consumes lot of memory and system can be crashed




for of loop

        variable   strings and arrays
         |         |
         v         v
for(let val of StrVar){
  console.log(val);
}



